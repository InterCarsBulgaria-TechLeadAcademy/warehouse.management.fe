/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.7
 */
import type {
  ApiResponse,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  GetInventory200,
  LoginUserParams,
  Order,
  Pet,
  PetBody,
  UpdatePetWithFormBody,
  UploadFileBody,
  User,
  UserArrayBody
} from './model'
import { customInstance } from './api'
import type { BodyType } from './api'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const getSwaggerPetstore = () => {
  /**
   * Returns a single pet
   * @summary Find pet by ID
   */
  const getPetById = (petId: number, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Pet>({ url: `/pet/${petId}`, method: 'GET' }, options)
  }

  /**
   * @summary Updates a pet in the store with form data
   */
  const updatePetWithForm = (
    petId: number,
    updatePetWithFormBody: BodyType<UpdatePetWithFormBody>,
    options?: SecondParameter<typeof customInstance>
  ) => {
    const formUrlEncoded = new URLSearchParams()
    if (updatePetWithFormBody.name !== undefined) {
      formUrlEncoded.append('name', updatePetWithFormBody.name)
    }
    if (updatePetWithFormBody.status !== undefined) {
      formUrlEncoded.append('status', updatePetWithFormBody.status)
    }

    return customInstance<unknown>(
      {
        url: `/pet/${petId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        data: formUrlEncoded
      },
      options
    )
  }

  /**
   * @summary Deletes a pet
   */
  const deletePet = (petId: number, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>({ url: `/pet/${petId}`, method: 'DELETE' }, options)
  }

  /**
   * @summary uploads an image
   */
  const uploadFile = (
    petId: number,
    uploadFileBody: BodyType<UploadFileBody>,
    options?: SecondParameter<typeof customInstance>
  ) => {
    const formData = new FormData()
    if (uploadFileBody.additionalMetadata !== undefined) {
      formData.append('additionalMetadata', uploadFileBody.additionalMetadata)
    }
    if (uploadFileBody.file !== undefined) {
      formData.append('file', uploadFileBody.file)
    }

    return customInstance<ApiResponse>(
      {
        url: `/pet/${petId}/uploadImage`,
        method: 'POST',
        headers: { 'Content-Type': 'multipart/form-data' },
        data: formData
      },
      options
    )
  }

  /**
   * @summary Add a new pet to the store
   */
  const addPet = (petBody: BodyType<PetBody>, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>(
      {
        url: `/pet`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: petBody
      },
      options
    )
  }

  /**
   * @summary Update an existing pet
   */
  const updatePet = (
    petBody: BodyType<PetBody>,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<unknown>(
      {
        url: `/pet`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: petBody
      },
      options
    )
  }

  /**
   * Multiple status values can be provided with comma separated strings
   * @summary Finds Pets by status
   */
  const findPetsByStatus = (
    params: FindPetsByStatusParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Pet[]>({ url: `/pet/findByStatus`, method: 'GET', params }, options)
  }

  /**
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @deprecated
   * @summary Finds Pets by tags
   */
  const findPetsByTags = (
    params: FindPetsByTagsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Pet[]>({ url: `/pet/findByTags`, method: 'GET', params }, options)
  }

  /**
   * Returns a map of status codes to quantities
   * @summary Returns pet inventories by status
   */
  const getInventory = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetInventory200>({ url: `/store/inventory`, method: 'GET' }, options)
  }

  /**
   * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
   * @summary Find purchase order by ID
   */
  const getOrderById = (orderId: number, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Order>({ url: `/store/order/${orderId}`, method: 'GET' }, options)
  }

  /**
   * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
   * @summary Delete purchase order by ID
   */
  const deleteOrder = (orderId: number, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>({ url: `/store/order/${orderId}`, method: 'DELETE' }, options)
  }

  /**
   * @summary Place an order for a pet
   */
  const placeOrder = (order: BodyType<Order>, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Order>(
      {
        url: `/store/order`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: order
      },
      options
    )
  }

  /**
   * @summary Get user by user name
   */
  const getUserByName = (username: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User>({ url: `/user/${username}`, method: 'GET' }, options)
  }

  /**
   * This can only be done by the logged in user.
   * @summary Updated user
   */
  const updateUser = (
    username: string,
    user: BodyType<User>,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<unknown>(
      {
        url: `/user/${username}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: user
      },
      options
    )
  }

  /**
   * This can only be done by the logged in user.
   * @summary Delete user
   */
  const deleteUser = (username: string, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<unknown>({ url: `/user/${username}`, method: 'DELETE' }, options)
  }

  /**
   * This can only be done by the logged in user.
   * @summary Create user
   */
  const createUser = (user: BodyType<User>, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
      { url: `/user`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: user },
      options
    )
  }

  /**
   * @summary Creates list of users with given input array
   */
  const createUsersWithArrayInput = (
    userArrayBody: BodyType<UserArrayBody>,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      {
        url: `/user/createWithArray`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: userArrayBody
      },
      options
    )
  }

  /**
   * @summary Creates list of users with given input array
   */
  const createUsersWithListInput = (
    userArrayBody: BodyType<UserArrayBody>,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      {
        url: `/user/createWithList`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: userArrayBody
      },
      options
    )
  }

  /**
   * @summary Logs user into the system
   */
  const loginUser = (params: LoginUserParams, options?: SecondParameter<typeof customInstance>) => {
    return customInstance<string>({ url: `/user/login`, method: 'GET', params }, options)
  }

  /**
   * @summary Logs out current logged in user session
   */
  const logoutUser = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>({ url: `/user/logout`, method: 'GET' }, options)
  }

  return {
    getPetById,
    updatePetWithForm,
    deletePet,
    uploadFile,
    addPet,
    updatePet,
    findPetsByStatus,
    findPetsByTags,
    getInventory,
    getOrderById,
    deleteOrder,
    placeOrder,
    getUserByName,
    updateUser,
    deleteUser,
    createUser,
    createUsersWithArrayInput,
    createUsersWithListInput,
    loginUser,
    logoutUser
  }
}
export type GetPetByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['getPetById']>>
>
export type UpdatePetWithFormResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['updatePetWithForm']>>
>
export type DeletePetResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['deletePet']>>
>
export type UploadFileResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['uploadFile']>>
>
export type AddPetResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['addPet']>>
>
export type UpdatePetResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['updatePet']>>
>
export type FindPetsByStatusResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['findPetsByStatus']>>
>
export type FindPetsByTagsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['findPetsByTags']>>
>
export type GetInventoryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['getInventory']>>
>
export type GetOrderByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['getOrderById']>>
>
export type DeleteOrderResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['deleteOrder']>>
>
export type PlaceOrderResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['placeOrder']>>
>
export type GetUserByNameResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['getUserByName']>>
>
export type UpdateUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['updateUser']>>
>
export type DeleteUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['deleteUser']>>
>
export type CreateUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['createUser']>>
>
export type CreateUsersWithArrayInputResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['createUsersWithArrayInput']>>
>
export type CreateUsersWithListInputResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['createUsersWithListInput']>>
>
export type LoginUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['loginUser']>>
>
export type LogoutUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSwaggerPetstore>['logoutUser']>>
>
